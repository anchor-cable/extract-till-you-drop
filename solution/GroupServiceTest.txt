<?php

namespace School\Tests;

use PHPUnit_Framework_MockObject_MockObject;
use PHPUnit_Framework_TestCase;
use School\GroupService;
use School\Model;
use School\Model\Group;
use School\Model\GroupRepository;
use School\Model\Pupil;

final class GroupServiceTest extends PHPUnit_Framework_TestCase
{
    const GROUP_ID = 123;
    const PUPIL_ID = 456;

    /**
     * @var Pupil
     */
    private $pupil;

    /**
     * @var Group
     */
    private $group;

    /**
     * @var Model\PupilRepository | PHPUnit_Framework_MockObject_MockObject
     */
    private $pupilRepository;

    /**
     * @var GroupRepository | PHPUnit_Framework_MockObject_MockObject
     */
    private $groupRepository;

    /**
     * @var GroupService
     */
    private $SUT;

    protected function setUp()
    {
        $this->groupRepository = $this->getMock('School\Model\GroupRepository');
        $this->pupilRepository = $this->getMock('School\Model\PupilRepository');
        $this->group = new Group(self::GROUP_ID);
        $this->pupil = new Pupil(self::PUPIL_ID);
        $this->SUT = new GroupService($this->groupRepository, $this->pupilRepository);
    }

    /**
     * @test
     */
    public function it_should_add_a_pupil_to_a_group()
    {
        $this->expectAGroupIsFound();
        $this->expectAPupilAFound();
        $this->expectTheGroupToBePersisted();

        $this->SUT->add(self::GROUP_ID, self::PUPIL_ID);

        $this->assertEquals(array($this->pupil), $this->group->getPupils());
    }

    /**
     * @test
     */
    public function it_should_throw_when_there_are_already_five_pupils()
    {
        $this->group->addPupil(new Pupil(1));
        $this->group->addPupil(new Pupil(2));
        $this->group->addPupil(new Pupil(3));

        $this->expectAGroupIsFound();

        $this->setExpectedException('School\Model\TooManyPupilsException');
        $this->SUT->add(self::GROUP_ID, self::PUPIL_ID);
    }

    /**
     * @test
     */
    public function it_should_throw_when_pupil_is_already_in_group()
    {
        $this->group->addPupil($this->pupil);
        $this->expectAGroupIsFound();
        $this->expectAPupilAFound();

        $this->setExpectedException('School\Model\PupilAlreadyInGroupException');
        $this->SUT->add(self::GROUP_ID, self::PUPIL_ID);

    }

    private function expectAGroupIsFound()
    {
        $this->groupRepository
            ->expects($this->once())
            ->method('find')
            ->with(self::GROUP_ID)
            ->will($this->returnValue($this->group));
    }

    private function expectAPupilAFound()
    {
        $this->pupilRepository
            ->expects($this->once())
            ->method('find')
            ->with(self::PUPIL_ID)
            ->will($this->returnValue($this->pupil));
    }

    private function expectTheGroupToBePersisted()
    {
        $this->groupRepository
            ->expects($this->once())
            ->method('persist')
            ->with($this->group);
    }
}
